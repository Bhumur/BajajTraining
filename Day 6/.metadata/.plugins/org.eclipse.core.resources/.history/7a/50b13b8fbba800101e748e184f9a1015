package com.example.demo;

import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Predicate;


// Using a StandAlone Class to Implements an Functional Interface
class Conditional implements Predicate<String>{
	@Override
	public boolean test(String t) {
		return t.startsWith("A");
	}
	
}

public class PredicateUsage {
	
	// lambdas can be argument to method
	public static void printName(List<String> names, Predicate<String> conditinal) {
		
//		Consumer<String> abc;
		
		names.forEach((e)-> conditinal.test(e));
		names.forEach((e) ->{
			if(conditinal.test(e)) {
				System.out.println("Name Strating With A : " + e);
			}
		});
	}

	// Lambdas can be returned 
	public static Predicate<Integer> getPredicate(int key){
		
		return null;
	}
	public static void main(String[] args) {

		Predicate<String> demoOne = new Conditional();
		System.out.println(demoOne.test("Ashish"));
		
	
// Using Annonymus class to implements a Functional Interface	
		Predicate<String> annon = new Predicate<String>() {
			@Override
			public boolean test(String t) {
				return t.startsWith("A");
			}
		};
		System.out.println(annon.test("Ambre"));
		
		
// Using Lambda to using Functional Interface
		
		Predicate<String> testForChar = (name) -> name.startsWith("A");
		
		System.out.println(testForChar.test("Abhishek"));
		
		
		
//
		List<String> names = Arrays.asList("Bhumur","Sarvesh", "Abhishek","Kushal","CHetan","Shoyeb","Abhijeet");
		printName(names, testForChar);
		
		
		List<Integer> marks = Arrays.asList(35,84,26,75,26,99);
		Predicate<Integer> cond = getPredicate(1);
				
		
	}
	
	

}
